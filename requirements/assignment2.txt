Assignment 2 - More Collision, Timing, Projectiles
--------------------------------------------------
Due. February 17, 2017

There are four parts to this assignment. They add onto assignment 1. 


1. More Collision Detection
----------------------------
Add collision detection so the viewpoint cannot pass into a space
outside of the world array. The world space is 100x50x100 units.
If the viewpoint reaches the edge of the world space it should
stop moving so it does not leave the world space.


2. Timing
---------
The update() function will be called by OpenGL. This is used for
the animations. If the updates to the screen are allowed to run
freely then the speed of the animation will depend on how often
the function is called. Faster computers will have faster animations.

To avoid this you need to use real time to schedule updates to the
animated objects. Use real time to update the animations on a
fixed time schedule.  You should check the current time with each
call to update() and only change the animation if enough time has
passed since the previous change. Do not use sleep() for this operation.


3. Launching a Projectile
-------------------------
Launch a projectile from the viewpoint. It should travel in the direction
which the viewpoint was facing when it is launched. The player should be
able to control the angle and velocity of the projectile when it is
launched. When the projectile strikes a cube in the wall both the projectile
and the cube should be removed from the game.

The projectile should travel in a straight line from the viewpoint.
You will likely want to use the getViewPosition() and getViewOrientation()
functions to find the starting location of the viewpoint and the
angle that the viewpoint is facing. It is a good idea to examine the
values these functions return, particularly the orientation, to understand
the values they return.

The mouse() function allows you to respond to button press and release
events on the mouse. Remove the existing printf's from the mouse() function
in your final submission. They are there to help understand the function and
are not meant to be part of the final system.  Launch the projectile when
the left mouse button is pressed.

If a projectile impacts the side of the world space then it should be removed
(when 0>x>99 or 0>z>99 or y>49).

Use the mob functions to create and control the projectile. There are examples
of these functions in a1.c. Opponents will be added in later assignments
which can collide with the projectiles and be removed from the game.

4. Displaying a Two Dimensional World Map
-----------------------------------------

Use the draw2D() function in a1.c to draw two dimensional maps on the
screen. The map should currently show the boundary of the world,
the player's current location, and all of the walls.
The maps should display the x and z coordinates of the world. They do
not need to show elevation in the y axis.

The int displayMap variable will be used to indicate what type of map will
be displayed. When:
        displayMap == 0,  no map is displayed
        displayMap == 1,  a small world map in the upper right corner is drawn
        displayMap == 2,  a large world map is displayed in the middle of the
                          screen is drawn
The value of displayMap is cycled through using the m key.

You can use the draw2D*() functions to drawn lines, boxes, and triangles.
The set2Dcolour() function lets you set the colour of the shapes.
These are described in the readme.txt file.

Draw lines to indicate the boundary of the map and draw a square to
indicate the players location on the map. When shot is fired it should
be drawn on the map while it exists.

You should use the screenWidth and screenHeight variables to
scale the size of the maps when the window size is changed.


Coding Practices
----------------
Write the code using standard stylistic practices. Use functions, 
reasonable variable names, and consistent indentation.
If the code is difficult for the TA to understand then you
will lose marks.

As usual, keep backups of your work using source control software.


Starting Code
-------------
The starting code is available on the Courselink site.
You can untar the file using tar xf filename.
All of the changes to the code can be made in the a1.c file.

Note that the graphics code may be modified for later assignments. If you
make changes to the graphics code (in graphics.c or visible.c) then you
may have to recode the changes for a later assignment.
  

Submitting the Assignment
-------------------------
Submit the assignment using Courselink. Submit only the source code
and the makefile. Bundle the code in a tar file.

Include a makefile that will compile the executable. Name the executable a1.
 
The TA will unpack your code and type "make". They will then try to
run an executable named "./a1".  If the make command or executing a1
does not work then you will lose a substantial number of marks.

It is always a good idea to unpack and test the file you are submitting
to be sure that what you submit actually compiles. 
 
 
 
